from aiogram.types import KeyboardButton, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from db_func.db_function import DataBaseBot


def get_keyboard(list_button, list_id, chat_id):
    """ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Å—Ç—Ä–æ—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã(—Å –¥–æ–ø. –∫–Ω–æ–ø–∫–æ–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä)

    list_button[] - —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫

    list_id[] - —Å–ø–∏—Å–æ–∫ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫

    chat_id - —á–∏—Å–ª–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    db = DataBaseBot()
    corrector_id = db.get_corrector_id()  # –î–ª—è —Ç–µ—Ö –∫—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ ''–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å üñã'
    if chat_id in corrector_id:
        list_button.append('–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å üñã')
    n = len(list_id)
    for i in range(0, n):
        if list_button[i] == 'üìç–û–±—Ä–∞—Ç–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª':
            list_id.append(list_id.pop(i))
            list_button.append(list_button.pop(i))

    buttons = [
        [KeyboardButton(text=text) for text in list_button]
    ]
    # button_next = [[KeyboardButton(text=">>>")]]  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    # if len(list_button) >= 10:  # TODO: –í—ã–≥–ª—è–¥–∏—Ç –Ω–µ –æ—á, –Ω–∞–¥–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ
    #     print(buttons[:9])
    #     buttons = buttons[:9]+button_next
    #     print(buttons)
    #     builder = ReplyKeyboardBuilder(buttons)
    #     builder.adjust(1)
    # else:
    builder = ReplyKeyboardBuilder(buttons)
    builder.adjust(1)

    keyboard = builder.as_markup(input_field_placeholder="–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É üëá", resize_keyboard=True)
    return keyboard


# def get_next_keyboard(list_button, list_id, chat_id):
#     """ –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–ª–µ–¥—É—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫ """
#     db = DataBaseBot()
#     print(list_button)
#     corrector_id = db.get_corrector_id()  # –î–ª—è —Ç–µ—Ö –∫—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ ''–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å üñã'
#     if chat_id in corrector_id:
#         list_button.append('–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å üñã')
#     n = len(list_id)
#     for i in range(0, n):
#         if list_button[i] == 'üìç–û–±—Ä–∞—Ç–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª':
#             list_id.append(list_id.pop(i))
#             list_button.append(list_button.pop(i))
#
#     buttons = [
#         [KeyboardButton(text=text) for text in list_button]
#     ]
#     button_back = [[KeyboardButton(text="<<<")]]  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–Ω–æ–ø–æ–∫
#     print(f"–í—Ç–æ—Ä–æ–π –Ω–∞–±–æ—Ä  - {buttons}")
#     n = len(list_button)+1
#     print(buttons[0][9:])
#     buttons = buttons[9:n]+button_back
#     print(buttons)
#     builder = ReplyKeyboardBuilder(buttons)
#     builder.adjust(1)
#
#     keyboard = builder.as_markup(input_field_placeholder="–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É üëá", resize_keyboard=True)
#     return keyboard


def get_inline_keyboard():
    """ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω –ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. """
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å",
                                     callback_data='Answer'))
    return builder
