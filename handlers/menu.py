""" –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –º–µ–Ω—é
"""
import time

import requests
import random
import os
from bs4 import BeautifulSoup

from aiogram import types, Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile

from fsm import Menu
from config import API_TOKEN
from db_func.db_function import DataBaseBot
from keyboards import get_keyboard, get_inline_keyboard  # , get_next_keyboard

router = Router()

bot = Bot(token=API_TOKEN)


@router.message(Menu.choice, F.text)
async def menu(message: types.Message, state: FSMContext):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–¥–µ–ª–∞ –º–µ–Ω—é. """
    chat_id = message.chat.id  # ID-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    button_text = message.text  # –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
    db = DataBaseBot()
    db.update_last_visit(chat_id=chat_id)  # –°—á–µ—Ç—á–∏–∫ –∫–æ–ª-–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π

    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    back_id = data['identifier']  # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π identifier

    if button_text == '–ù–∞—à–ª–æ—Å—å –≤—Å–µ, —á—Ç–æ –Ω—É–∂–Ω–æ':  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ª—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–º –ø–æ–º–æ–≥–ª–∏
        db.count_help_plus(chat_id)

    msg_id = db.get_identifier(button_text)  # –ü–æ–ª—É—á–µ–Ω–∏–µ id –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    if not msg_id:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö(–∏–º–µ–µ—Ç id 2)
        list_id, list_button = db.get_buttons(identifier=back_id)  # –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ
        text_msg, file_path, action = db.get_msg_text(2)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        await message.answer(text=text_msg,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–≤–µ—Ä–Ω–æ–º –≤—ã–±–æ—Ä–µ –∫–Ω–æ–ø–∫–∏
                             reply_markup=get_keyboard(list_button=list_button, list_id=list_id, chat_id=chat_id),
                             parse_mode='html')

    elif button_text == '–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å üñã':  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await state.set_state(Menu.correct_msg)
        text_msg, file_path, action = db.get_msg_text(back_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        await message.answer(text='–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é')
        time.sleep(1)
        await message.answer(text=text_msg, reply_markup=types.ReplyKeyboardRemove())
        
    else:
        list_id = data['list_id']
        if len(list_id) == 0:
            list_id.append(msg_id[0])
        for id_node in msg_id:  # –í—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ id
            if id_node in list_id:
                msg_id = id_node
                break

    db.count_click_button(button_id=msg_id)  # –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª-–≤–æ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É

    await state.update_data(back_identifier=back_id)
    await state.update_data(identifier=msg_id)

    list_id, list_button = db.get_buttons(identifier=msg_id)  # –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ
    text_msg, file_path, action = db.get_msg_text(msg_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    await state.update_data(list_id=list_id)
    data1 = await state.get_data()

    if not action:  # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ—Ç
        text = text_processing(text_msg)
        for text_msg in text:
            await message.answer(text=text_msg.format(help_count=db.get_count_help()),
                                 reply_markup=get_keyboard(list_button=list_button, list_id=list_id,
                                                           chat_id=chat_id),
                                 disable_web_page_preview=True,
                                 parse_mode='html')

    match action:
        case 'send_organizers':  # –û—Å—Ç–∞–≤–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
            text = text_processing(text_msg)
            list_id, list_button = db.get_buttons(identifier=1)

            await state.update_data(subject=button_text)
            await state.update_data(list_id=list_id)
            await state.set_state(Menu.feedback)

            for text_msg in text:
                await message.answer(text=text_msg,
                                     reply_markup=get_keyboard(['üèõ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                                                               [1],
                                                               0000000),
                                     disable_web_page_preview=True,
                                     parse_mode='html')
        case 'search_in_city':  # TODO: –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞
            await state.set_state(Menu.find_city)
            text = text_processing(text_msg)
            for text_msg in text:
                await message.answer(text=text_msg,
                                     reply_markup=types.ReplyKeyboardRemove(),
                                     disable_web_page_preview=True,
                                     parse_mode='html')
        case '':  # TODO: –û—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
            pass
        case 'send_file':  # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª
            if text_msg:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –≤—ã–≤–æ–¥–∏–º
                text = text_processing(text_msg)  # –°–ø–∏—Å–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                for text_msg in text:  # –ü–æ–æ—á–µ—Ä–µ–¥–Ω—ã–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                    await message.answer(text=text_msg,
                                         reply_markup=types.ReplyKeyboardRemove(),
                                         disable_web_page_preview=True,
                                         parse_mode='html')

            if '|' in file_path:  # –†–∞–∑–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ —Ñ–æ—Ç–æ–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ
                file_path = file_path.split('|')
            else:
                file_path = [file_path]
            path_cards = db.path_cards_by_name(file_path=file_path)  # –°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏

            for path_card in path_cards:
                for link in path_card.split('|'):
                    photo = FSInputFile(path='data/photo/' + link)
                    await message.answer_photo(photo=photo,
                                               reply_markup=get_keyboard(list_button=list_button, chat_id=chat_id,
                                                                         list_id=list_id))
        case 'send_pdf':  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ pdf
            text = text_processing(text_msg)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤
            for text_msg in text:  # –ü–æ–æ—á–µ—Ä–µ–¥–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞
                await message.answer(text=text_msg,
                                     reply_markup=types.ReplyKeyboardRemove(),
                                     disable_web_page_preview=True,
                                     parse_mode='html')
            if '|' in file_path:  # –î–µ–ª–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –Ω–∞–¥–æ –∏–ª–∏ –¥–µ–ª–∞–µ–º —Å–ø–∏—Å–∫–æ–º, –µ—Å–ª–∏ –æ–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
                file_path = file_path.split('|')
            else:
                file_path = [file_path]

            for name in file_path:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –∫–Ω–æ–ø–∫–∞–º–∏
                # with open('data/' + name, "rb") as pdf1:
                #     f1 = pdf1.read()
                file = FSInputFile(path='data/' + name)
                await message.answer_document(document=file,
                                              visible_file_name=name,
                                              reply_markup=get_keyboard(list_button=list_button,
                                                                        list_id=list_id, chat_id=chat_id))
        case 'search_fund':  # TODO: –ü–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            text = text_processing(text_msg)
            await state.set_state(Menu.find_fund)

            for text_msg in text:
                await message.answer(text=text_msg,
                                     reply_markup=types.ReplyKeyboardRemove(),
                                     disable_web_page_preview=True,
                                     parse_mode='html')
        case 'send_card_and_text':  # TODO: –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç
            random_num = random.randint(1, 7)  # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ –∫–æ–ª-–≤—É –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤
            text_msg = db.get_random_text(random_num)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
            list_id, list_button = db.get_buttons(1)  # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—é

            text = text_processing(text_msg)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞

            for text_msg in text:  # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ
                await message.answer(text=text_msg,
                                     reply_markup=get_keyboard(list_button=list_button,
                                                               list_id=list_id, chat_id=chat_id),
                                     disable_web_page_preview=True,
                                     parse_mode='html')
        case 'send_advice':
            count_cards = db.len_cards()  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª-–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫
            number = random.randint(1, count_cards)
            link_cards = db.link_cards(number)

            list_id, list_button = db.get_buttons(1)
            link_cards = link_cards.split('|')
            for link in link_cards[:-1]:
                photo = FSInputFile(path='data/photo/' + link)
                await message.answer_photo(photo=photo,
                                           reply_markup=types.ReplyKeyboardRemove())
            photo = FSInputFile(path='data/photo/' + link_cards[-1])
            await message.answer_photo(photo=photo,
                                       reply_markup=get_keyboard(list_button=list_button,
                                                                 list_id=list_id, chat_id=chat_id))


def text_processing(text):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç - –º–µ–Ω—è–µ—Ç –≤—Å–µ –∫–∞–≤—ã—á–∫–∏ """
    text = text.replace('‚Äú', '"').replace('‚Äù', '"')

    if text.find('–†–ê–ó–î–ï–õ–ò–¢–¨') + 1:  # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        correct_text = []
        while text.find('–†–ê–ó–î–ï–õ–ò–¢–¨') + 1:
            separator = text.find('–†–ê–ó–î–ï–õ–ò–¢–¨')
            correct_text.append(text[:separator])
            text = text[separator + 10:]
        correct_text.append(text[:])
        return correct_text
    elif len(text) > 4096:
        index_separator = text.index('\n', 4000)
        return text[:index_separator], text[index_separator + 2:]
    text = [text]
    return text


@router.message(Menu.find_fund, F.text)
async def search_fund(message: types.Message, state: FSMContext):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ """
    db = DataBaseBot()
    chat_id = message.chat.id
    await state.set_state(Menu.choice)

    status = find_fund(message.text)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–æ–Ω–¥–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É

    list_id, list_button = db.get_buttons(identifier=123)  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await state.update_data(identifier=123)
    if status:  # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

        await message.answer(text="""–Ø –Ω–∞—à–µ–ª —ç—Ç—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ñ–æ–Ω–¥–æ–≤ —É –Ω–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ - —Å–µ—Ä–≤–∏—Å–∞ <a href="https://dobro.mail.ru/sos/">VK –î–æ–±—Ä–æ</a>. –í—Å–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ –∏—Ö –±–∞–∑–µ –ø—Ä–æ—à–ª–∏ —Å–µ—Ä—å–µ–∑–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —é—Ä–∏—Å—Ç–æ–≤ –∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ—Ç—á–µ—Ç—ã. –≠—Ç–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. 

–û–¥–Ω–∞–∫–æ, –≤ –±–∞–∑–µ –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç–µ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –ê –≤ —Å—Ç—Ä–∞–Ω–µ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç–µ–Ω —Ç—ã—Å—è—á. –¢–∞–∫ —á—Ç–æ —Ç–æ—á–Ω–æ –µ—Å—Ç—å –º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –∫—Ç–æ –ø–æ–∫–∞ —Å—é–¥–∞ –Ω–µ –ø–æ–ø–∞–ª.
""", disable_web_page_preview=True,
                             reply_markup=get_keyboard(list_button=list_button, list_id=list_id, chat_id=0),
                             parse_mode='html')
    else:
        await message.answer(text="""–Ø –Ω–µ –Ω–∞—à–µ–ª —ç—Ç—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ñ–æ–Ω–¥–æ–≤ —É –Ω–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ <a href="https://dobro.mail.ru/sos/">VK –î–æ–±—Ä–æ</a>. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ö–æ—Ä–æ—à–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –ø—Ä–æ—Å—Ç–æ –µ–µ –Ω–µ—Ç –≤ –±–∞–∑–µ —Å–µ—Ä–≤–∏—Å–∞. –•–æ—Ç–∏—Ç–µ, —è —Ä–∞—Å—Å–∫–∞–∂—É, –ø–æ –∫–∞–∫–∏–º –µ—â–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –º–æ–∂–Ω–æ –µ–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å?

–ù–∞–ø—Ä–∏–º–µ—Ä, –≤–æ –º–Ω–æ–≥–∏—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –±–∞–Ω–∫–æ–≤ –∏ —É —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ø–Ω–¥–µ–∫—Å–∞ <a href="https://help.yandex.ru/">¬´–ü–æ–º–æ—â—å —Ä—è–¥–æ–º¬ª</a> —Ç–æ–∂–µ –µ—Å—Ç—å —Å–ø–∏—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ñ–æ–Ω–¥–æ–≤. –¢–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.

–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –≤ —ç—Ç–∏ –±–∞–∑—ã, –ø—Ä–æ—à–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
""",
                             disable_web_page_preview=True,
                             reply_markup=types.ReplyKeyboardRemove(),
                             parse_mode='html')
        for link in "–ö—Ç–æ —Ç–∞–∫–∏–µ –º–æ—à–µ–Ω–Ω–∏–∫–∏ 1.jpg|–ö—Ç–æ —Ç–∞–∫–∏–µ –º–æ—à–µ–Ω–Ω–∏–∫–∏ 2.jpg".split('|'):
            photo = FSInputFile('data/photo/' + link)
            await message.answer_photo(photo=photo,
                                       reply_markup=get_keyboard(list_button=list_button,
                                                                 list_id=list_id, chat_id=0))


def find_fund(name_fond):
    """ –ü–æ–∏—Å–∫ —Ñ–æ–Ω–¥–æ–≤ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    results = []
    name_fond_plus = '+'.join(name_fond.split())  # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    response = requests.get(f'https://dobro.mail.ru/sos/?query={name_fond_plus}')
    contents = response.text
    bs = BeautifulSoup(contents, 'lxml')
    address = bs.find_all('span', class_='vkuiVisuallyHidden')

    for name in address:
        results.append(name.text.lower())
    name_fond = name_fond.lower()
    if name_fond in results:  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞—à–ª–æ—Å—å/–Ω–µ –Ω–∞—à–ª–æ—Å—å
        return True
    else:
        return False


@router.message(Menu.feedback, F.text)
async def send_admin(message: types.Message, state: FSMContext):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–≥ –∞–∫–∫–∞—É–Ω—Ç """
    db = DataBaseBot()
    data = await state.get_data()
    await state.set_state(Menu.choice)

    list_id, list_button = db.get_buttons(1)

    chat_id = message.chat.id  # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å
    subject = data['subject']  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–¥–µ–ª –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–¥–µ—Ç –∑–∞–ø—Ä–æ—Å
    if message.text == "üèõ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        text_msg, file_path, action = db.get_msg_text(1)
        help_count = db.get_count_help()
        await message.answer(text=text_msg.format(help_count=help_count),
                             reply_markup=get_keyboard(list_button=list_button, list_id=list_id, chat_id=0))
    else:
        responsible_id = db.get_responsible_id()  # id –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å

        text_from_admin = f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(chat_id)}\n–†–∞–∑–¥–µ–ª: {subject}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}'  # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        await bot.send_message(chat_id=responsible_id[0], text=text_from_admin,
                               reply_markup=get_inline_keyboard().as_markup())
        if subject == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":  # –ï—Å–ª–∏ –æ—Å—Ç–∞–≤–ª—è—é—Ç –æ—Ç–∑—ã–≤
            await message.answer(text="""–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –Ω–∞—à–ª–∏ –≤—Ä–µ–º—è –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.
    
–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∞–ª—å—à–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç.""",
                                 reply_markup=get_keyboard(list_button=list_button, list_id=list_id, chat_id=0))
        else:
            await message.answer(text="""–°–ø–∞—Å–∏–±–æ, –æ—Ç–≤–µ—Ç–∏–º –í–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å—Ç—É–ø–∏–ª –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.
    
–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∞–ª—å—à–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç.
    """,
                                 reply_markup=get_keyboard(list_button=list_button, list_id=list_id, chat_id=0))


@router.callback_query(Menu.start_answer, F.data.in_({'Answer': '–û—Ç–≤–µ—Ç–∏—Ç—å'}))
async def get_answer(call: types.CallbackQuery, state: FSMContext):
    """ –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ """
    await state.set_state(Menu.answer)
    text_msg = call.message.text.split('\n')
    id_user, team = text_msg[0].split(' ')[2], ' '.join(text_msg[1].split(': ')[1:])
    await call.message.answer(text=f"""–°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∏ —Ä–∞–∑–¥–µ–ª: \n{id_user}\n{team}\n\n–ò –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏–≤ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏ –æ—Ç–≤–µ—Ç Enter-–æ–º""",
                              reply_markup=types.ReplyKeyboardRemove())


@router.message(Menu.answer, F.text)
async def send_answer(message: types.Message, state: FSMContext):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é """
    await state.set_state(Menu.start_answer)
    text = message.text.split('\n')
    id_user = text[0]
    team = text[1]
    text = '\n'.join(text[2:])

    await bot.send_message(chat_id=id_user, text=f"""–í–∞–º –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —á–∞—Ç-–±–æ—Ç–∞: {team}\n\n{text}""")
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')


@router.message(Menu.find_city, F.text)
async def search_in_city(message: types.Message, state: FSMContext):
    """ –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ –≥–æ—Ä–æ–¥–∞—Ö. """
    db = DataBaseBot()
    await state.set_state(Menu.choice)
    data = await state.get_data()
    back_id = data['back_identifier']
    items = db.get_items(back_id)
    rus_items = {
        "–û–¥–µ–∂–¥–∞ –¥–µ—Ç—Å–∫–∞—è –∏–ª–∏ –≤–∑—Ä–æ—Å–ª–∞—èüëï": "–æ–¥–µ–∂–¥—ã",
        "–î–µ—Ç—Å–∫–∏–µ –∏–≥—Ä—É—à–∫–∏üß∏": "–∏–≥—Ä—É—à–µ–∫",
        "–¢–µ—Ö–Ω–∏–∫–∞üìª": "—Ç–µ—Ö–Ω–∏–∫–∏",
        "–ö–Ω–∏–≥–∞: –æ—Ç–¥–∞—Ç—å –¥—Ä—É–≥–∏–º –∏–ª–∏ –≤ –º–∞–∫—É–ª–∞—Ç—É—Ä—É?üìö": "–∫–Ω–∏–≥"
    }
    result = find_in_city(city=message.text, items=rus_items[items])

    list_id, list_button = db.get_buttons(24)
    if 1 < len(result):
        result.append(' ')
        result.append(' ')

        await message.answer(f"""–í–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—à–µ–ª —è.
–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –∞–¥—Ä–µ—Å–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø–æ –∫–∞—Ä—Ç–∞–º (<a href="https://yandex.ru/maps/">¬´–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã¬ª</a>, <a href="https://2gis.ru/">¬´2–ì–ò–°¬ª</a>) —Å –ø–æ–º–æ—â—å—é –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥¬ª, ¬´–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω¬ª, ¬´—Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä¬ª, ¬´—Å–¥–∞—Ç—å¬ª (—Ç–µ—Ö–Ω–∏–∫—É, –æ–¥–µ–∂–¥—É, –∫–Ω–∏–≥–∏, –ø–ª–∞—Å—Ç–∏–∫) –∏ –ø–æ—Ö–æ–∂–∏–º.\n\n
{result[0]}
{result[1]}
{result[2]}
""",
                             reply_markup=get_keyboard(list_button=list_button, list_id=list_id, chat_id=0),
                             parse_mode='html')
    elif len(result) == 0:
        await message.answer(f"""–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã.
–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –∞–¥—Ä–µ—Å–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø–æ –∫–∞—Ä—Ç–∞–º (<a href="https://yandex.ru/maps/">¬´–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã¬ª</a>, <a href="https://2gis.ru/">¬´2–ì–ò–°¬ª</a>) —Å –ø–æ–º–æ—â—å—é –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥¬ª, ¬´–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω¬ª, ¬´—Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä¬ª, ¬´—Å–¥–∞—Ç—å¬ª (—Ç–µ—Ö–Ω–∏–∫—É, –æ–¥–µ–∂–¥—É, –∫–Ω–∏–≥–∏, –ø–ª–∞—Å—Ç–∏–∫) –∏ –ø–æ—Ö–æ–∂–∏–º.""",
                             reply_markup=get_keyboard(list_button=list_button, list_id=list_id, chat_id=0),
                             parse_mode='html')


def find_in_city(city, items):  # TODO: –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫
    """ –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤ –≤ –≥–æ—Ä–æ–¥–µ """
    result = []
    # TODO: –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    response = requests.get(f'https://yandex.ru/maps/10945/uhta/search/–ø—É–Ω–∫—Ç%20–ø—Ä–∏—ë–º–∞%20{items}%20–≤%20–≥–æ—Ä–æ–¥–µ%20{city}')
    contents = response.text
    bs = BeautifulSoup(contents, 'lxml')
    address = bs.find_all('a', 'search-business-snippet-view__address')

    for name in address:
        result.append(name.text)

    return result


# @router.message(Menu.correct_msg, F.text)
# def give_message_corrector(msg):
#     """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞. """
#     chat_id = msg.chat.id
#     db = DataBaseBot()
#     db.update_text(msg=msg.text, identifier=identifier[])